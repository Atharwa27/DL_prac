import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow.keras import layers, models
from tensorflow.keras.preprocessing.image import ImageDataGenerator

# --------Data Directories----------
train_data_dir= 'mnist-jpg/train'
test_data_dir= 'mnist-jpg/test'

#-------- Image Data Generators for train, test data with rescaling----------
train_datagen = ImageDataGenerator(rescale= 1.0/ 255)
test_datagen = ImageDataGenerator(rescale= 1.0/ 255)

#--------Load Images from directories---------
train_batch_size = 1000
train_generator = train_datagen.flow_from_directory(
    train_data_dir,
    target_size=(28,28),
    batch_size= train_batch_size,
    class_mode= 'categorical',
    color_mode= 'grayscale',
    shuffle = True,
)

test_batch_size = 2000
test_generator = test_datagen.flow_from_directory(
    test_data_dir,
    target_size=(28,28),
    batch_size= test_batch_size,
    class_mode= 'categorical',
    color_mode= 'grayscale',
    shuffle = True,
)

#----------Load a batch for training and testing--------------
x_train, y_train = train_generator[0]
x_test, y_test = test_generator[0]



#----------- MODEL ARCHITECTURE  ------------
model = models.Sequential()
model.add(layers.Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)))
model.add(layers.MaxPooling2D(2, 2))
model.add(layers.Flatten())
model.add(layers.Dense(64, activation= 'relu'))
model.add(layers.Dense(10, activation= 'softmax'))


#---------- Compile the MOdel ----------------
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

#-----------Train the Model---------------

history= model.fit(x_train, y_train, epochs=5, batch_size=64, validation_data=(x_test, y_test))

#------------Evaluating the model--------------
test_loss, test_acc= model.evaluate(x_test, y_test)
print("Test Loss: ", test_loss)
print("Test Accuracy: ", test_acc)


#-----------Example Image---------------
n = 20
plt.figure()
plt.imshow(x_test[n].reshape(28,28), cmap="gray")
plt.title(f"Actual Number:  {np.argmax(y_test[n])}")
predicted_class = model.predict(x_test)
print("Predicted Class: ", np.argmax(predicted_class[n]))

#--------- Plot Accuracy-------------
plt.figure()
plt.plot(history.history['accuracy'], label = 'Train Accuracy')
plt.plot(history.history['val_accuracy'], label= 'Validation Accuracy')
plt.title('Model Accuracy')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.legend()
plt.show()


#---------- PLOT LOSS-------------
plt.figure()
plt.plot(history.history['loss'], label = 'Train loss')
plt.plot(history.history['val_loss'], label= 'Validation Loss')
plt.title('Model loss')
plt.xlabel('Epochs')
plt.ylabel('loss')
plt.legend()
plt.show()

